// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error)
	ReadCommand(ctx context.Context, in *ReadCommandRequest, opts ...grpc.CallOption) (*ReadCommandResponse, error)
	UpdateCommand(ctx context.Context, in *UpdateCommandRequest, opts ...grpc.CallOption) (*UpdateCommandResponse, error)
	DeleteCommand(ctx context.Context, in *DeleteCommandRequest, opts ...grpc.CallOption) (*DeleteCommandResponse, error)
	ListCommand(ctx context.Context, in *ListCommandRequest, opts ...grpc.CallOption) (CommandService_ListCommandClient, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error) {
	out := new(CreateCommandResponse)
	err := c.cc.Invoke(ctx, "/command.CommandService/CreateCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) ReadCommand(ctx context.Context, in *ReadCommandRequest, opts ...grpc.CallOption) (*ReadCommandResponse, error) {
	out := new(ReadCommandResponse)
	err := c.cc.Invoke(ctx, "/command.CommandService/ReadCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) UpdateCommand(ctx context.Context, in *UpdateCommandRequest, opts ...grpc.CallOption) (*UpdateCommandResponse, error) {
	out := new(UpdateCommandResponse)
	err := c.cc.Invoke(ctx, "/command.CommandService/UpdateCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) DeleteCommand(ctx context.Context, in *DeleteCommandRequest, opts ...grpc.CallOption) (*DeleteCommandResponse, error) {
	out := new(DeleteCommandResponse)
	err := c.cc.Invoke(ctx, "/command.CommandService/DeleteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) ListCommand(ctx context.Context, in *ListCommandRequest, opts ...grpc.CallOption) (CommandService_ListCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandService_ServiceDesc.Streams[0], "/command.CommandService/ListCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceListCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandService_ListCommandClient interface {
	Recv() (*ListCommandResponse, error)
	grpc.ClientStream
}

type commandServiceListCommandClient struct {
	grpc.ClientStream
}

func (x *commandServiceListCommandClient) Recv() (*ListCommandResponse, error) {
	m := new(ListCommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	CreateCommand(context.Context, *CreateCommandRequest) (*CreateCommandResponse, error)
	ReadCommand(context.Context, *ReadCommandRequest) (*ReadCommandResponse, error)
	UpdateCommand(context.Context, *UpdateCommandRequest) (*UpdateCommandResponse, error)
	DeleteCommand(context.Context, *DeleteCommandRequest) (*DeleteCommandResponse, error)
	ListCommand(*ListCommandRequest, CommandService_ListCommandServer) error
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) CreateCommand(context.Context, *CreateCommandRequest) (*CreateCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommand not implemented")
}
func (UnimplementedCommandServiceServer) ReadCommand(context.Context, *ReadCommandRequest) (*ReadCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCommand not implemented")
}
func (UnimplementedCommandServiceServer) UpdateCommand(context.Context, *UpdateCommandRequest) (*UpdateCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommand not implemented")
}
func (UnimplementedCommandServiceServer) DeleteCommand(context.Context, *DeleteCommandRequest) (*DeleteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}
func (UnimplementedCommandServiceServer) ListCommand(*ListCommandRequest, CommandService_ListCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCommand not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_CreateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).CreateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CommandService/CreateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).CreateCommand(ctx, req.(*CreateCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_ReadCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).ReadCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CommandService/ReadCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).ReadCommand(ctx, req.(*ReadCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_UpdateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).UpdateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CommandService/UpdateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).UpdateCommand(ctx, req.(*UpdateCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CommandService/DeleteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).DeleteCommand(ctx, req.(*DeleteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_ListCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServiceServer).ListCommand(m, &commandServiceListCommandServer{stream})
}

type CommandService_ListCommandServer interface {
	Send(*ListCommandResponse) error
	grpc.ServerStream
}

type commandServiceListCommandServer struct {
	grpc.ServerStream
}

func (x *commandServiceListCommandServer) Send(m *ListCommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommand",
			Handler:    _CommandService_CreateCommand_Handler,
		},
		{
			MethodName: "ReadCommand",
			Handler:    _CommandService_ReadCommand_Handler,
		},
		{
			MethodName: "UpdateCommand",
			Handler:    _CommandService_UpdateCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _CommandService_DeleteCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCommand",
			Handler:       _CommandService_ListCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/Adapter/In/ApiGrcp/proto/command.proto",
}
