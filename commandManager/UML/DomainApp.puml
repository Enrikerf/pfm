@startuml
legend
<u><b>Legend</b></u>
Render Aggregations: true
Render Fields: true
Render Methods: true
Pritave Aggregations: true
end legend
namespace BatchPort {
    interface Delete  {
        + Delete(uuid string) error

    }
    interface Find  {
        + Find(uuid string) (Entity.Batch, error)

    }
    interface FindBy  {
        + FindBy(conditions <font color=blue>interface</font>{}) []Entity.Batch

    }
    interface Save  {
        + Save(batch Entity.Batch) error

    }
    interface Update  {
        + Update(result Entity.Batch) error

    }
}



namespace CallPort {
    interface Request  {
        + Request(task Entity.Task) Entity.Batch

    }
}



namespace Config {
    class App << (S,Aquamarine) >> {
        + ApiGrpc ApiGrcp.ApiGrpc

        - loadDotEnv() 
        - loadDb() *gorm.DB
        - loadLoop(db *gorm.DB) 
        - loadApiGrpc(db *gorm.DB) 

        + Run() 

    }
}


"Config.App""uses" o-- "ApiGrcp.ApiGrpc"

namespace CreateBatch {
    class Command << (S,Aquamarine) >> {
        + TaskUuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindBatchPort TaskPort.Find
        + SaveBatchPort BatchPort.Save

        + Create(command Command) (Entity.Batch, error)

    }
    interface UseCase  {
        + Create(command Command) (Entity.Batch, error)

    }
}

"CreateBatch.UseCase" <|-- "implements""CreateBatch.Service"

"CreateBatch.Service""uses" o-- "BatchPort.Save"
"CreateBatch.Service""uses" o-- "TaskPort.Find"

namespace CreateResult {
    class Command << (S,Aquamarine) >> {
        + Content string
        + BatchUuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindBatchPort BatchPort.Find
        + SaveResultPort ResultPort.Save

        + Create(command Command) (Entity.Result, error)

    }
    interface UseCase  {
        + Create(command Command) (Entity.Result, error)

    }
}

"CreateResult.UseCase" <|-- "implements""CreateResult.Service"

"CreateResult.Service""uses" o-- "BatchPort.Find"
"CreateResult.Service""uses" o-- "ResultPort.Save"

namespace CreateStep {
    class Command << (S,Aquamarine) >> {
        + TaskUuid string
        + Sentence string

    }
    class Service << (S,Aquamarine) >> {
        + FindTaskPort TaskPort.Find
        + SaveStepPort StepPort.Save

        + Create(command Command) (Entity.Step, error)

    }
    interface UseCase  {
        + Create(command Command) (Entity.Step, error)

    }
}

"CreateStep.UseCase" <|-- "implements""CreateStep.Service"

"CreateStep.Service""uses" o-- "StepPort.Save"
"CreateStep.Service""uses" o-- "TaskPort.Find"

namespace CreateTask {
    class Command << (S,Aquamarine) >> {
        + Host string
        + Port string
        + CommandSentences []string
        + Mode string
        + Status string
        + ExecutionMode string

    }
    class Service << (S,Aquamarine) >> {
        + SaveTaskPort TaskPort.Save

        + Create(command Command) (Entity.Task, error)

    }
    interface UseCase  {
        + Create(task Command) (Entity.Task, error)

    }
}

"CreateTask.UseCase" <|-- "implements""CreateTask.Service"

"CreateTask.Service""uses" o-- "TaskPort.Save"

namespace DeleteBatch {
    class Command << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + DeleteBatchPort BatchPort.Delete

        + Delete(command Command) error

    }
    interface UseCase  {
        + Delete(command Command) error

    }
}

"DeleteBatch.UseCase" <|-- "implements""DeleteBatch.Service"

"DeleteBatch.Service""uses" o-- "BatchPort.Delete"

namespace DeleteResult {
    class Command << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + DeleteTaskPort ResultPort.Delete

        + Delete(command Command) error

    }
    interface UseCase  {
        + Delete(command Command) error

    }
}

"DeleteResult.UseCase" <|-- "implements""DeleteResult.Service"

"DeleteResult.Service""uses" o-- "ResultPort.Delete"

namespace DeleteStep {
    class Command << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + DeleteStepPort TaskPort.Delete

        + Delete(command Command) error

    }
    interface UseCase  {
        + Delete(command Command) error

    }
}

"DeleteStep.UseCase" <|-- "implements""DeleteStep.Service"

"DeleteStep.Service""uses" o-- "TaskPort.Delete"

namespace DeleteTask {
    class Command << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + DeleteTaskPort TaskPort.Delete

        + Delete(command Command) error

    }
    interface UseCase  {
        + Delete(command Command) error

    }
}

"DeleteTask.UseCase" <|-- "implements""DeleteTask.Service"

"DeleteTask.Service""uses" o-- "TaskPort.Delete"

namespace Entity {
    class Batch << (S,Aquamarine) >> {
        + Uuid uuid.UUID
        + TaskUuid uuid.UUID
        + Results []Result
        + CreatedAt time.Time
        + UpdatedAt time.Time

        + AddResult(result Result) 

    }
    class Call << (S,Aquamarine) >> {
        + Command string

    }
    class Result << (S,Aquamarine) >> {
        + Uuid uuid.UUID
        + BatchUuid uuid.UUID
        + Content string

    }
    class Step << (S,Aquamarine) >> {
        + Uuid uuid.UUID
        + TaskUuid uuid.UUID
        + Sentence string

    }
    class Task << (S,Aquamarine) >> {
        + Uuid uuid.UUID
        + Host string
        + Port string
        + Steps []Step
        + Mode ValueObject.Modes
        + Status ValueObject.TaskStatus
        + ExecutionMode ValueObject.ExecutionMode

    }
}


"Entity.Batch""uses" o-- "Entity.Result"
"Entity.Batch""uses" o-- "time.Time"
"Entity.Batch""uses" o-- "uuid.UUID"
"Entity.Result""uses" o-- "uuid.UUID"
"Entity.Step""uses" o-- "uuid.UUID"
"Entity.Task""uses" o-- "Entity.Step"
"Entity.Task""uses" o-- "ValueObject.ExecutionMode"
"Entity.Task""uses" o-- "ValueObject.Modes"
"Entity.Task""uses" o-- "ValueObject.TaskStatus"
"Entity.Task""uses" o-- "uuid.UUID"

namespace ListBatches {
    class Query << (S,Aquamarine) >> {
    }
    class Service << (S,Aquamarine) >> {
        + FindBatchesByPort BatchPort.FindBy

        + List(query Query) []Entity.Batch

    }
    interface UseCase  {
        + List(query Query) []Entity.Batch

    }
}

"ListBatches.UseCase" <|-- "implements""ListBatches.Service"

"ListBatches.Service""uses" o-- "BatchPort.FindBy"

namespace ListResults {
    class Query << (S,Aquamarine) >> {
    }
    class Service << (S,Aquamarine) >> {
        + FindResultsByPort ResultPort.FindBy

        + List(query Query) []Entity.Result

    }
    interface UseCase  {
        + List(query Query) []Entity.Result

    }
}

"ListResults.UseCase" <|-- "implements""ListResults.Service"

"ListResults.Service""uses" o-- "ResultPort.FindBy"

namespace ListSteps {
    class Query << (S,Aquamarine) >> {
    }
    class Service << (S,Aquamarine) >> {
        + FindStepByPort StepPort.FindBy

        + List(query Query) []Entity.Step

    }
    interface UseCase  {
        + List(query Query) []Entity.Step

    }
}

"ListSteps.UseCase" <|-- "implements""ListSteps.Service"

"ListSteps.Service""uses" o-- "StepPort.FindBy"

namespace ListTasks {
    class Query << (S,Aquamarine) >> {
    }
    class Service << (S,Aquamarine) >> {
        + FindTasksByPort TaskPort.FindBy

        + List(query Query) []Entity.Task

    }
    interface UseCase  {
        + List(query Query) []Entity.Task

    }
}

"ListTasks.UseCase" <|-- "implements""ListTasks.Service"

"ListTasks.Service""uses" o-- "TaskPort.FindBy"

namespace Loop {
    class Service << (S,Aquamarine) >> {
        - callRequestPort CallPort.Request
        - findTasksByPort TaskPort.FindBy
        - updateTaskPort TaskPort.Update
        - saveBatchPort BatchPort.Save
        - saveResultPort ResultPort.Save
        - exit bool

        - slot(wg *sync.WaitGroup, index int, task *Entity.Task) 
        - updateTaskStatus(index int, task *Entity.Task, status ValueObject.TaskStatus) 
        - saveResults(index int, resultBatch Entity.Batch) 
        - printTask(index int, task Entity.Task) 

        + GetExit() bool
        + Loop() error
        + Iteration() 

    }
    interface UseCase  {
        + Loop() error

    }
}

"Loop.UseCase" <|-- "implements""Loop.Service"

"Loop.Service""uses" o-- "BatchPort.Save"
"Loop.Service""uses" o-- "CallPort.Request"
"Loop.Service""uses" o-- "ResultPort.Save"
"Loop.Service""uses" o-- "TaskPort.FindBy"
"Loop.Service""uses" o-- "TaskPort.Update"

namespace Model {
    class OptionalString << (S,Aquamarine) >> {
        + Change bool
        + Value string

    }
}



namespace ReadBatch {
    class Query << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindBatchPort BatchPort.Find

        + Read(query Query) (Entity.Batch, error)

    }
    interface UseCase  {
        + Read(query Query) (Entity.Batch, error)

    }
}

"ReadBatch.UseCase" <|-- "implements""ReadBatch.Service"

"ReadBatch.Service""uses" o-- "BatchPort.Find"

namespace ReadResult {
    class Query << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindResultPort ResultPort.Find

        + Read(query Query) (Entity.Result, error)

    }
    interface UseCase  {
        + Read(query Query) (Entity.Result, error)

    }
}

"ReadResult.UseCase" <|-- "implements""ReadResult.Service"

"ReadResult.Service""uses" o-- "ResultPort.Find"

namespace ReadStep {
    class Query << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindStepPort StepPort.Find

        + Read(query Query) (Entity.Step, error)

    }
    interface UseCase  {
        + Read(query Query) (Entity.Step, error)

    }
}

"ReadStep.UseCase" <|-- "implements""ReadStep.Service"

"ReadStep.Service""uses" o-- "StepPort.Find"

namespace ReadTask {
    class Query << (S,Aquamarine) >> {
        + Uuid string

    }
    class Service << (S,Aquamarine) >> {
        + FindTaskPort TaskPort.Find

        + Read(query Query) (Entity.Task, error)

    }
    interface UseCase  {
        + Read(query Query) (Entity.Task, error)

    }
}

"ReadTask.UseCase" <|-- "implements""ReadTask.Service"

"ReadTask.Service""uses" o-- "TaskPort.Find"

namespace ResultPort {
    interface Delete  {
        + Delete(uuid string) error

    }
    interface Find  {
        + Find(uuid string) (Entity.Result, error)

    }
    interface FindBy  {
        + FindBy(conditions <font color=blue>interface</font>{}) []Entity.Result

    }
    interface Save  {
        + Save(result Entity.Result) error

    }
    interface Update  {
        + Update(result Entity.Result) error

    }
}



namespace StepPort {
    interface DeleteStep  {
        + Delete(uuid string) error

    }
    interface Find  {
        + Find(uuid string) (Entity.Step, error)

    }
    interface FindBy  {
        + FindBy(conditions <font color=blue>interface</font>{}) []Entity.Step

    }
    interface Save  {
        + Save(step Entity.Step) error

    }
    interface UpdateStepPort  {
        + Update(step Entity.Step) error

    }
}



namespace TaskPort {
    interface Delete  {
        + Delete(uuid string) error

    }
    interface Find  {
        + Find(uuid string) (Entity.Task, error)

    }
    interface FindBy  {
        + FindBy(conditions <font color=blue>interface</font>{}) []Entity.Task

    }
    interface Save  {
        + Save(task Entity.Task) error

    }
    interface Update  {
        + Update(task Entity.Task) error

    }
}



namespace UpdateBatch {
    class Command << (S,Aquamarine) >> {
        + Uuid string
        + TaskUuid Model.OptionalString

    }
    class Service << (S,Aquamarine) >> {
        + FindBatchPort BatchPort.Find
        + FindTaskPort TaskPort.Find
        + UpdateBatchPort BatchPort.Update

        + Update(command Command) error

    }
    interface UseCase  {
        + Update(command Command) error

    }
}

"UpdateBatch.UseCase" <|-- "implements""UpdateBatch.Service"

"UpdateBatch.Command""uses" o-- "Model.OptionalString"
"UpdateBatch.Service""uses" o-- "BatchPort.Find"
"UpdateBatch.Service""uses" o-- "BatchPort.Update"
"UpdateBatch.Service""uses" o-- "TaskPort.Find"

namespace UpdateResult {
    class Command << (S,Aquamarine) >> {
        + Uuid string
        + Content Model.OptionalString
        + BatchUuid Model.OptionalString

    }
    class Service << (S,Aquamarine) >> {
        + FindResultPort ResultPort.Find
        + FindBatchPort BatchPort.Find
        + UpdateResultPort ResultPort.Update

        + Update(command Command) error

    }
    interface UseCase  {
        + Update(command Command) error

    }
}

"UpdateResult.UseCase" <|-- "implements""UpdateResult.Service"

"UpdateResult.Command""uses" o-- "Model.OptionalString"
"UpdateResult.Service""uses" o-- "BatchPort.Find"
"UpdateResult.Service""uses" o-- "ResultPort.Find"
"UpdateResult.Service""uses" o-- "ResultPort.Update"

namespace UpdateStep {
    class Command << (S,Aquamarine) >> {
        + Uuid string
        + TaskUuid Model.OptionalString
        + Sentence Model.OptionalString

    }
    class Service << (S,Aquamarine) >> {
        + FindStepPort StepPort.Find
        + FindTaskPort TaskPort.Find
        + UpdateStepPort StepPort.UpdateStepPort

        + Update(command Command) error

    }
    interface UseCase  {
        + Update(command Command) error

    }
}

"UpdateStep.UseCase" <|-- "implements""UpdateStep.Service"

"UpdateStep.Command""uses" o-- "Model.OptionalString"
"UpdateStep.Service""uses" o-- "StepPort.Find"
"UpdateStep.Service""uses" o-- "StepPort.UpdateStepPort"
"UpdateStep.Service""uses" o-- "TaskPort.Find"

namespace UpdateTask {
    class Command << (S,Aquamarine) >> {
        + Uuid string
        + Host OptionalString
        + Port OptionalString
        + Mode OptionalString
        + Status OptionalString
        + ExecutionMode OptionalString

    }
    class OptionalString << (S,Aquamarine) >> {
        + Change bool
        + Value string

    }
    class Service << (S,Aquamarine) >> {
        + FindTaskPort TaskPort.Find
        + UpdateTaskPort TaskPort.Update

        + Update(command Command) error

    }
    interface UseCase  {
        + Update(command Command) error

    }
}

"UpdateTask.UseCase" <|-- "implements""UpdateTask.Service"

"UpdateTask.Command""uses" o-- "UpdateTask.OptionalString"
"UpdateTask.Service""uses" o-- "TaskPort.Find"
"UpdateTask.Service""uses" o-- "TaskPort.Update"

namespace ValueObject {
    class ExecutionMode << (S,Aquamarine) >> {
        + String() string

    }
    class Modes << (S,Aquamarine) >> {
        + String() string

    }
    class MyModes << (S,Aquamarine) >> {
        + UNARY() string

    }
    class StepVo << (S,Aquamarine) >> {
        + Sentence string

    }
    class TaskStatus << (S,Aquamarine) >> {
        + String() string

    }
    class ValueObject.ExecutionMode << (T, #FF7700) >>  {
    }
    class ValueObject.Modes << (T, #FF7700) >>  {
    }
    class ValueObject.TaskStatus << (T, #FF7700) >>  {
    }
}



"__builtin__.int" #.. "alias of""ValueObject.ExecutionMode"
"__builtin__.int" #.. "alias of""ValueObject.Modes"
"__builtin__.int" #.. "alias of""ValueObject.TaskStatus"
@enduml
