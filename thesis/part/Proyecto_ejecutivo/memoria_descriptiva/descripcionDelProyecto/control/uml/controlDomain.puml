@startuml

skinparam linetype polyline

' Horizontal lines: -->, <--, <-->
' Vertical lines: ->, <-, <->

namespace EngineModule {
    interface Engine  {
            + SetDuty(duty Duty)
            + SetFrequency(frequency Frequency)
            + Brake()
            + Release()
            + SetClockwise()
            + SetCounterClockWise()
            + GetPosition() Angle
            + GetCurrentLinearSpeed() LinearSpeed
            + GetCurrentAngularSpeed() AngularSpeed
            + TearDown()
            + ResetState()
        }

        class engine << (S,Aquamarine) >> {
            + position Angle
            + linearSpeed LinearSpeed
            + angularSpeed AngularSpeed
            + brake OutPin
            + dir OutPin
            + pwmPin PWMPin
        }

}
"EngineModule.Engine" <|-- "implements""EngineModule.engine"
"EngineModule.engine""uses" o- "EncoderDomain.Encoder"
"EngineModule.engine""uses" o-- "PhysicModule"



namespace EncoderDomain{
        interface Encoder  {
            + Watchdog()
            + ResetPosition()
            + GetPosition() Angle
            + TearDown()
        }
}
"EncoderDomain.Encoder""uses" o-- "PhysicModule"


namespace PinModule {
    namespace EncoderPinModule{
        interface EncoderPin  {
            + Read() bool
            + WaitForEdge()
            + TearDown()
        }
        "EncoderDomain.Encoder""uses" o-- "PinModule.EncoderPinModule.EncoderPin"
    }
    namespace OutPinModule{
        interface OutPin  {
            + Up()
            + Down()
            + TearDown()

        }
        "EngineModule.engine""uses" o-- "PinModule.OutPinModule.OutPin"
    }
    namespace PWMPinModule{
        interface PWMPin  {
            + GetMaxDuty() Duty
            + GetMinDuty() Duty
            + GetMaxFrequency() Frequency
            + SetPWM(duty Duty, frequency Frequency)
            + StopPWM()
            + TearDown()
        }
        "EngineModule.engine""uses" o-- "PinModule.PWMPinModule.PWMPin"

    }
}
"PinModule.PWMPinModule.PWMPin""uses" o-- "PhysicModule"
namespace PhysicModule{
    class PhysicModule.Duty << (T, #FF7700) >>  {
    }
    class PhysicModule.Frequency << (T, #FF7700) >>  {
    }
    class PhysicModule.Angle << (T, #FF7700) >>  {
    }
    class PhysicModule.LinearSpeed << (T, #FF7700) >>  {
    }
    class PhysicModule.AngularSpeed << (T, #FF7700) >>  {
    }
    class PhysicModule.RPM << (T, #FF7700) >>  {
    }
}
'
'"__builtin__.int32" #.. "alias of""PhysicModule.Duty"
'"__builtin__.int64" #.. "alias of""PhysicModule.Frequency"
'"__builtin__.int64" #.. "alias of""PhysicModule.Angle"
'"__builtin__.int64" #.. "alias of""PhysicModule.LinearSpeed"
'"__builtin__.int64" #.. "alias of""PhysicModule.AngularSpeed"



namespace EnginePidControllerModule{
    interface EnginePIDController  {
        + New(engine Engine)
        + Configure(P,I,D,st float64)
        + enableRpmControl(goal RPM)
        + enablePositionControl(goal Angle)
        + disableControl()
        + SetP(p float64)
        + SetI(i float64)
        + SetD(d float64)
        + SetSampleTime(st float64)
        + Calculate(currentValue float64) float64
        + Reset()
    }

    class enginePIDController << (S,Aquamarine) >> {
        + engine Engine
        + isControlEnabled bool
        + goal float64
        + currentValue float64
    }
    interface PIDAlgorithm  {
        + SetGoal(goal float64)
        + SetP(p float64)
        + SetI(i float64)
        + SetD(d float64)
        + GetIntegralTerm() float64
        + SetSampleTime(st float64)
        + Calculate(currentValue float64) float64
        + Reset()
    }
    class pidAlgorithm << (S,Aquamarine) >> {
        + SetGoal(goal float64)
        + SetP(p float64)
        + SetI(i float64)
        + SetD(d float64)
        + GetIntegralTerm() float64
        + SetSampleTime(st float64)
        + Calculate(currentValue float64) float64
        + Reset()
    }
}

"EnginePidControllerModule.enginePIDController" o- "uses""EngineModule.Engine"
"EnginePidControllerModule.EnginePIDController" <|-- "implements""EnginePidControllerModule.enginePIDController"
"EnginePidControllerModule.enginePIDController""uses" o-- "EnginePidControllerModule.PIDAlgorithm"
"EnginePidControllerModule.PIDAlgorithm" <|-- "implements""EnginePidControllerModule.pidAlgorithm"

@enduml
